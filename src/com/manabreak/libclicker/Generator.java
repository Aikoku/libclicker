package com.manabreak.libclicker;

import java.math.BigDecimal;
import java.math.BigInteger;

/**
 *
 * @author Harri
 */
public class Generator extends Item
{
    public interface Callback
    {
        void onProcessed();
    }
    
    /**
     * World this generator currently belongs to
     */
    private World m_world = null;
    
    /**
     * Callback for extended functionality
     */
    private Callback m_callback = null;
    
    /**
     * Currency this generator should generate
     */
    private Currency m_currency;
    
    /**
     * How many times this generator has been processed
     */
    private long m_timesProcessed = 0;
    
    /**
     * Base amount of resources this generator generates
     */
    private BigInteger m_baseAmount;
    
    /**
     * Multiplier used to increase the amount of resources generated
     * when this generator is upgraded
     */
    private double m_amountMultiplier;
    
    /**
     * Level of this generator
     */
    private long m_level;
    
    /**
     * Max. level allowed for this generator
     */
    private long m_maxLevel;
    
    /**
     * Builder class for creating new generators
     */
    public static class Builder
    {
        private final World m_world;
        private String m_name = "Nameless generator";
        private Callback m_onProcessed = null;
        private Currency m_currency = null;
        private BigInteger m_baseAmount = BigInteger.ONE;
        private double m_amountMultiplier = 1.1;
        private long m_maxLevel = Long.MAX_VALUE;
        
        /**
         * Creates a new generator builder
         * @param world World to build the generator into
         */
        public Builder(World world)
        {
            m_world = world;
        }
        
        /**
         * Sets the name for the generator
         * @param name Name for the generator
         * @return This builder for chaining
         */
        public Builder name(String name)
        {
            m_name = name;
            return this;
        }
        
        /**
         * Sets the multiplier for resource generation. This multiplier
         * is used in the formula (amount) = (base amount) * (multiplier) ^ (level)
         * @param multiplier Amount generation multiplier per level
         * @return This builder for chaining
         */
        public Builder multiplier(double multiplier)
        {
            m_amountMultiplier = multiplier;
            return this;
        }
        
        /**
         * Sets the maximum allowed level for this generator. The max level must
         * be greated than zero.
         * @param maxLevel Maximum allowed level for this generator
         * @return This builder for chaining
         */
        public Builder maxLevel(long maxLevel)
        {
            if(maxLevel <= 0) throw new IllegalArgumentException("Max level must be greater than 0");
            m_maxLevel = maxLevel;
            return this;
        }
        
        /**
         * Sets the base amount of resources generated by this generator.
         * This is the amount the generator generates at level 1 and is used
         * as the base for the higher levels.
         * @param amount Base amount of resources generated at level 1
         * @return This builder for chaining
         */
        public Builder baseAmount(BigInteger amount)
        {
            if(amount == null) throw new IllegalArgumentException("Base amount cannot be null");
            m_baseAmount = amount;
            return this;
        }
        
        /**
         * Sets the base amount of resources generated by this generator.
         * This is the amount the generator generates at level 1 and is used
         * as the base for the higher levels.
         * @param amount Base amount of resources generated at level 1
         * @return This builder for chaining
         */
        public Builder baseAmount(long amount)
        {
            m_baseAmount = new BigInteger("" + amount);
            return this;
        }
        
        /**
         * Sets the base amount of resources generated by this generator.
         * This is the amount the generator generates at level 1 and is used
         * as the base for the higher levels.
         * @param amount Base amount of resources generated at level 1
         * @return This builder for chaining
         */
        public Builder baseAmount(int amount)
        {
            m_baseAmount = new BigInteger("" + amount);
            return this;
        }
        
        /**
         * Sets the currency that should be generated by the generator.
         * @param c Currency to generate
         * @return This builder for chaining
         * @throws IllegalArgumentException Thrown if the currency is null
         */
        public Builder generate(Currency c) throws IllegalArgumentException
        {
            if(c == null) throw new IllegalArgumentException("Currency cannot be null");
            m_currency = c;
            return this;
        }
        
        /**
         * Sets a callback for the generator to be called when the generator
         * has finished its processing cycle (i.e. has generated something).
         * @param callback Callback to call after generating something
         * @return This builder for chaining
         */
        public Builder callback(Callback callback)
        {
            m_onProcessed = callback;
            return this;
        }
        
        /**
         * Constructs the generator based on the given parameters
         * @return The generator
         */
        public Generator build()
        {
            Generator g = new Generator(m_world, m_name);
            g.m_callback = m_onProcessed;
            g.m_currency = m_currency;
            g.m_amountMultiplier = m_amountMultiplier;
            g.m_baseAmount = m_baseAmount;
            g.m_maxLevel = m_maxLevel;
            return g;
        }
    }
    
    /**
     * Constructs a new generator
     */
    private Generator(World world)
    {
        super(world);
    }
    
    /**
     * Constructs a new generator
     * @param name Name of this generator
     */
    private Generator(World world, String name)
    {
        super(world, name);
    }
    
    /**
     * Called when this generator is added to the world
     */
    void onAdd(World world)
    {
        if(m_world == null) m_world = world;
    }
    
    /**
     * Called when this generator is removed from the world
     */
    void onRemove(World world)
    {
        m_world = null;
    }
    
    /**
     * Removes this generator from the world
     */
    public void remove()
    {
        m_world.removeGenerator(this);
        m_world = null;
    }
    
    /**
     * 
     * @return 
     */
    World getWorld()
    {
        return m_world;
    }

    /**
     * Upgrades this generator by one level
     */
    public void upgrade()
    {
        if(m_level < m_maxLevel)
        {
            m_level++;
        }
    }
    
    /**
     * Downgrades this generator by one level
     */
    public void downgrade()
    {
        if(m_level > 0)
        {
            m_level--;
        }
    }
    
    /**
     * Retrieves the amount this generator currently is generating per
     * processing cycle
     * @return Amount of resources generated by this generator
     */
    public BigInteger getGeneratedAmount()
    {
        if(m_level == 0) return BigInteger.ZERO;
        
        BigDecimal tmp = new BigDecimal(m_baseAmount);
        tmp = tmp.multiply(new BigDecimal(Math.pow(m_amountMultiplier, m_level - 1)));
        return tmp.toBigInteger();
    }
    
    /**
     * Retrieves the current level of this generator.
     * @return Level of this generator
     */
    public long getLevel()
    {
        return m_level;
    }
    
    /**
     * Sets the level of this generator. If the given level parameter
     * is higher than the maximum allowed level for this generator,
     * the level of the generator is set to the maximum allowed level.
     * @param level Level to set
     */
    public void setLevel(long level)
    {
        m_level = Math.max(level, m_maxLevel);
    }
    
    /**
     * Maximizes the level of this generator.
     */
    public void maximize()
    {
        m_level = m_maxLevel;
    }
    
    /**
     * Processes this generator, generating resources as per the rules
     * of this generator.
     */
    public void process()
    {
        if(m_level > 0)
        {
            m_currency.add(getGeneratedAmount());
        }
        
        m_timesProcessed++;
        if(m_callback != null) m_callback.onProcessed();
    }
    
    public long getTimesProcessed()
    {
        return m_timesProcessed;
    }
}
